/**
 *
 * Copyright (c) 2014, the Railo Company Ltd. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http:></http:>//www.gnu.org/licenses/>.
 *
 */
package lucee.runtime.db.driver.state

import java.sql.PreparedStatement

object StateUtil {
    @Throws(SQLException::class)
    fun execute(pc: PageContext?, stat: Statement, sql: String): Boolean {
        if (pc == null) return stat.execute(sql)
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.execute(sql)
        } finally {
            pci.releaseActiveQuery()
        }
    }

    @Throws(SQLException::class)
    fun execute(pc: PageContext?, stat: Statement, sql: String, autoGeneratedKeys: Int): Boolean {
        if (pc == null) return stat.execute(sql, autoGeneratedKeys)
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.execute(sql, autoGeneratedKeys)
        } finally {
            pci.releaseActiveQuery()
        }
    }

    @Throws(SQLException::class)
    fun execute(pc: PageContext?, stat: Statement, sql: String, columnIndexes: IntArray?): Boolean {
        if (pc == null) return stat.execute(sql, columnIndexes)
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.execute(sql, columnIndexes)
        } finally {
            pci.releaseActiveQuery()
        }
    }

    @Throws(SQLException::class)
    fun execute(pc: PageContext?, stat: Statement, sql: String, columnNames: Array<String?>?): Boolean {
        if (pc == null) return stat.execute(sql, columnNames)
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.execute(sql, columnNames)
        } finally {
            pci.releaseActiveQuery()
        }
    }

    @Throws(SQLException::class)
    fun executeQuery(pc: PageContext?, stat: Statement, sql: String): ResultSet {
        if (pc == null) return stat.executeQuery(sql)
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.executeQuery(sql)
        } finally {
            pci.releaseActiveQuery()
        }
    }

    @Throws(SQLException::class)
    fun executeUpdate(pc: PageContext?, stat: Statement, sql: String): Int {
        if (pc == null) return stat.executeUpdate(sql)
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.executeUpdate(sql)
        } finally {
            pci.releaseActiveQuery()
        }
    }

    @Throws(SQLException::class)
    fun executeUpdate(pc: PageContext?, stat: Statement, sql: String, autoGeneratedKeys: Int): Int {
        if (pc == null) return stat.executeUpdate(sql, autoGeneratedKeys)
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.executeUpdate(sql, autoGeneratedKeys)
        } finally {
            pci.releaseActiveQuery()
        }
    }

    @Throws(SQLException::class)
    fun executeUpdate(pc: PageContext?, stat: Statement, sql: String, columnIndexes: IntArray?): Int {
        if (pc == null) return stat.executeUpdate(sql, columnIndexes)
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.executeUpdate(sql, columnIndexes)
        } finally {
            pci.releaseActiveQuery()
        }
    }

    @Throws(SQLException::class)
    fun executeUpdate(pc: PageContext?, stat: Statement, sql: String, columnNames: Array<String?>?): Int {
        if (pc == null) return stat.executeUpdate(sql, columnNames)
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.executeUpdate(sql, columnNames)
        } finally {
            pci.releaseActiveQuery()
        }
    }

    @Throws(SQLException::class)
    fun execute(pc: PageContext?, stat: PreparedStatement, sql: String): Boolean {
        if (pc == null) return stat.execute()
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.execute()
        } finally {
            pci.releaseActiveQuery()
        }
    }

    @Throws(SQLException::class)
    fun executeQuery(pc: PageContext?, stat: PreparedStatement, sql: String): ResultSet {
        if (pc == null) return stat.executeQuery()
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.executeQuery()
        } finally {
            pci.releaseActiveQuery()
        }
    }

    @Throws(SQLException::class)
    fun executeUpdate(pc: PageContext?, stat: PreparedStatement, sql: String): Int {
        if (pc == null) return stat.executeUpdate()
        val pci: PageContextImpl = pc as PageContextImpl
        return try {
            setActiveStatement(pci, stat, sql)
            stat.executeUpdate()
        } finally {
            pci.releaseActiveQuery()
        }
    }

    private fun setActiveStatement(pc: PageContextImpl, stat: Statement, sql: String) {
        pc.setActiveQuery(ActiveQuery(sql, System.currentTimeMillis()))
    }
}