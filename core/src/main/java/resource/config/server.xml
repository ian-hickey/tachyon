<?xml version="1.0" encoding="iso-8859-1"?>

<!-- 
Path placeholders: 
	{tachyon-server}: path to the Tachyon server directory typical where the Tachyon.jar is located
	{tachyon-config}: same as {tachyon-server} in server context and same as {tachyon-web} in web context}
	{temp-directory}: path to the temp directory of the current user of the system
	{home-directory}: path to the home directory of the current user of the system
	{web-root-directory}: path to the web root
	{system-directory}: path to thesystem directory
	{web-context-hash}: hash of the web context

-->

<cfTachyonConfiguration version="4.2">

	<!--
	system:
	
		out (output-stream)
			- system (write out to default output stream)
			- log (logs to out.log in tachyon-server/context/logs)
			- null (write no output)
			- class:<class> (class that implements java.io.PrintWriter)
			- file:<file> (file to write in)
	
		err (err-stream)
			- system (write out to default output stream)
			- log (logs to err.log in tachyon-server/context/logs)
			- null (write no output)
			- class:<class> (class that implements java.io.PrintWriter)
			- file:<file> (file to write in)
	-->
	<system out="system" err="system"/>


<!--	definition of all database used inside your application. 										-->
<!--	above you can find some definition of jdbc drivers (all this drivers are included at tachyon) 	-->
<!--	for other database drivers see at: 																-->
<!--	 - http://servlet.java.sun.com/products/jdbc/drivers 											-->
<!--	 - http://sourceforge.net 																		-->
<!--	or ask your database distributor 																-->
	<data-sources
		preserve-single-quote="yes">
	</data-sources>
	<mode develop="false"></mode>

	<!--
		deploy-directory - directory where java classes will be deployed
		custom-tag-directory - directory where the custom tags are
		tld-directory / fld-directory - directory where additional Function and Tag Library Deskriptor are.
		temp-directory - directory for temporary files (upload aso.)
	 -->
	<file-system  
		temp-directory="{tachyon-config}/temp/"
		fld-default-directory="{tachyon-config}/library/fld/"
		tld-default-directory="{tachyon-config}/library/tld/"
		function-default-directory="{tachyon-config}/library/function/"
		tag-default-directory="{tachyon-config}/library/tag/"
		deploy-directory="{tachyon-config}/cfclasses/">
	</file-system>
		
	<!--
		writers you can select with attribute format at tag dump
		name - name of the writer
		class - class that implement interface "tachyon.runtime.dump.DumpWriter"
		default - is this the default writer for the console or the bowser (browser,console)
	 -->
	<dump-writers>
		<dump-writer name="html" class="tachyon.runtime.dump.HTMLDumpWriter" default="browser"/>
		<dump-writer name="text" class="tachyon.runtime.dump.TextDumpWriter" default="console"/>
		
		<dump-writer name="classic" class="tachyon.runtime.dump.ClassicHTMLDumpWriter"/>
		<dump-writer name="simple" class="tachyon.runtime.dump.SimpleHTMLDumpWriter"/>
	</dump-writers>
	
	
	<remote-clients directory="{tachyon-config}remote-client/"/>
	
    <resources>
        <!--
        arguments:
		lock-timeout   - 	define how long a request wait for a lock
	 	-->
    	<default-resource-provider 
    		class="tachyon.commons.io.res.type.file.FileResourceProvider"
    		arguments="lock-timeout:1000;"/>
    		
    	<!--
    	arguments:
		socket-timeout - 	With this option set to a non-zero timeout, 
							a read call on the InputStream associated 
							with this Socket will block for only this amount 
							of time. 
							If the timeout expires, a java.net.SocketTimeoutException is raised, 
							though the Socket is still valid. 
							The option must be enabled prior to entering the blocking operation to have effect. 
							The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.
							(in milliseconds)
		client-timeout - 	how long a conection kep established (in milliseconds)
		lock-timeout   - 	define how long a request wait for a lock (in milliseconds)
	 	-->
    	<resource-provider 
    		scheme="ftp"
    		class="tachyon.commons.io.res.type.ftp.FTPResourceProvider"
    		arguments="lock-timeout:20000;socket-timeout:-1;client-timeout:60000"/>
    		
    	<!--
        arguments:
		lock-timeout	- 	define how long a request wait for a lock
		case-sensitive	-	is zip handled case-sensitive or not
		asynchronus - 		yes or no; define if a buffer is used to synchronize data to zip file.
							no make resource very slow
	 	-->
    	<resource-provider 
    		scheme="zip"
    		class="tachyon.commons.io.res.type.zip.ZipResourceProvider"
    		arguments="lock-timeout:1000;case-sensitive:true;"/>	
    	<!--
        arguments:
		lock-timeout   - 	define how long a request wait for a lock
		case-sensitive	-	is zip handled case-sensitive or not
	 	-->
    	<resource-provider 
    		scheme="tar"
    		class="tachyon.commons.io.res.type.tar.TarResourceProvider"
    		arguments="lock-timeout:1000;case-sensitive:true;"/>
    	<!--
        arguments:
		lock-timeout   - 	define how long a request wait for a lock
		case-sensitive	-	is zip handled case-sensitive or not
	 	-->
    	<resource-provider 
    		scheme="tgz"
    		class="tachyon.commons.io.res.type.tgz.TGZResourceProvider"
    		arguments="lock-timeout:1000;case-sensitive:true;"/>
    	<!--
        arguments:
		lock-timeout   - 	define how long a request wait for a lock
		case-sensitive	-	is http handled case-sensitive or not
	 	-->
    	<resource-provider 
    		scheme="http"
    		class="tachyon.commons.io.res.type.http.HTTPResourceProvider"
    		arguments="lock-timeout:10000;case-sensitive:false;"/>
    	<!--
        arguments:
		lock-timeout   - 	define how long a request wait for a lock
		case-sensitive	-	is http handled case-sensitive or not
	 	-->
    	<resource-provider 
    		scheme="https"
    		class="tachyon.commons.io.res.type.http.HTTPSResourceProvider"
    		arguments="lock-timeout:10000;case-sensitive:false;"/>
    	<!--
        arguments:
		lock-timeout   - 	define how long a request wait for a lock
		case-sensitive	-	is http handled case-sensitive or not
	 	-->
    	<resource-provider 
    		scheme="s3"
    		class="tachyon.commons.io.res.type.s3.S3ResourceProvider"
    		arguments="lock-timeout:10000;"/>
    		
    	<!--
    	this providers uses the jcifs library. see http://jcifs.samba.org/
        arguments:
		resolveOrder   - 	maps to jcifs.resolveOrder property, defaults to 'DNS'
		smb.client.dfs.disabled	-	maps to jcifs.smb.client.dfs.disabled property. defaults to 'true'
		NOTE: these defaults assume DNS lookups instead of workgroup/WINS. These settings make smb interactions faster.
	 	
    	<resource-provider 
    		scheme="smb"
    		class="tachyon.commons.io.res.type.smb.SMBResourceProvider"
    		arguments=""/>
    	-->
    	<!--
        arguments:
		lock-timeout   - 	define how long a request wait for a lock
	 	-->
    	<resource-provider 
    		scheme="ram"
    		class="tachyon.commons.io.res.type.ram.RamResourceProvider"
    		arguments="case-sensitive:true;lock-timeout:1000;"/>
    </resources>
	

	<!--
	scope configuration:
	
		cascading (expanding of undefined scope)
			- strict (argument,variables)
			- small (argument,variables,cgi,url,form)
			- standard (argument,variables,cgi,url,form,cookie)
			
		cascade-to-resultset: yes|no
			when yes also allow inside "output type query" and "loop type query" call implizid call of resultset
			
		merge-url-form:yes|no
			when yes all form and url scope are synonym for both data
		
		client-directory-max-size
			maximum size in bytes of the client scope directory (used for default type file)
		
		client-max-age
			the max age of the client scope in days
	-->
	<scope 
		cascading="standard"
		cascade-to-resultset="yes"
		merge-url-form="no"
		
		sessiontimeout="0,0,30,0"
		applicationtimeout="1,0,0,0"
		
		requesttimeout="0,0,0,50"
		
		sessionmanagement="yes"		
		clientmanagement="no" 
		setclientcookies="yes" 
		setdomaincookies="no"
		client-directory="{tachyon-config}/client-scope/"
		client-directory-max-size="100mb"
		client-max-age="90"
		
		/>
		
	<mail spool-interval="5" spool-enable="yes" timeout="30">
	</mail>
	
	<mappings>
	<!--
	directory mapping:
		
		inspect-template: never|once|always|<empty-string>
			never - when a template s loaded, tachyon no longer checks for changes on that template
			once - Tachyon only once per request check if the file has changed
			always - check for changes with every access on the file
			<empty-string> - no mapping specific setting, inherit setting config 
			
		virtual:
			virtual path of the application
			example: /somedir/
			
		physical: 
			physical path to the apllication
			example: d:/projects/app1/webroot/somedir/
			
		archive:
			path to an archive file:
			example: d:/projects/app1/rasfiles/somedir.ras
		primary: archive|physical
			define where tachyon first look for a called cfml file.
			for example when you define physical you can partiquel overwrite the archive.
 -->	
		<mapping
			readonly="yes"
			virtual="/tachyon-server/"
			physical="{tachyon-server}/context/"
			archive=""
			primary="physical"
			listener-mode="modern"
			listener-type="curr2root"
			inspect-template="once"/>
		<mapping
			readonly="yes"
			virtual="/tachyon/"
			physical="{tachyon-config}/context/"
			archive="{tachyon-config}/context/tachyon-context.lar"
			primary="physical"
			listener-mode="modern"
			listener-type="curr2root"
			inspect-template="once"/>
	</mappings>	
	
	<custom-tag>
		<mapping
			inspect-template="never"
			physical="{tachyon-config}/customtags/"/>
	</custom-tag>
	
	<ext-tags>
		<ext-tag type="java" name="HelloWorld" class="tachyon.cfx.example.HelloWorld"/>
	</ext-tags>
	
	<!--
	component:
		
		base: 
			path to base component for every component that have no base component defined 
		data-member-default-access: remote|public|package|private
			access type of component data member (variables in this scope)
	-->
	<component 
        base-cfml="/tachyon/Component.cfc"
		base-tachyon="/tachyon/Component.tachyon"
		data-member-default-access="public"
		dump-template="/tachyon/component-dump.cfm">
  		<mapping virtual="/default" physical="{tachyon-web}/components/" primary="physical" inspect-template="never"/>
  		<mapping virtual="/default-server" physical="{tachyon-server}/components/" primary="physical" inspect-template="never"/>
	</component>
	
	<!--
	cache handlers:
		
		base: 
			path to base component for every component that have no base component defined 
		data-member-default-access: remote|public|package|private
			access type of component data member (variables in this scope)
	-->
	<cache-handlers>
  		<cache-handler id="request" class="tachyon.runtime.cache.tag.request.RequestCacheHandler"/>
  		<cache-handler id="timespan" class="tachyon.runtime.cache.tag.timespan.TimespanCacheHandler"/>
	</cache-handlers>
	
	
	<!--
	regional configuration:
		
		locale: default: system locale
			define the locale 
		timezone: default:maschine configuration
			the ID for a TimeZone, either an abbreviation such as "PST", 
			a full name such as "America/Los_Angeles", or a custom ID such as "GMT-8:00". 
		timeserver: [example: swisstime.ethz.ch] default:local time
			dns of a ntp time server
	-->
	<regional
		timeserver="pool.ntp.org"/>
	
	<!--
	orm configuration:
		
		engine-class: class that implements interface tachyon.runtime.orm.ORMEngine
		
		
		timezone: default:maschine configuration
			the ID for a TimeZone, either an abbreviation such as "PST", 
			a full name such as "America/Los_Angeles", or a custom ID such as "GMT-8:00". 
		timeserver: [example: swisstime.ethz.ch] default:local time
			dns of a ntp time server
	-->
	<orm
		engine-class="tachyon.runtime.orm.DummyORMEngine"/>
	
	<!--
		enable and disable debugging
	 -->
	<debugging
		log-memory-usage="no"
		template="/tachyon/templates/debugging/debugging.cfm"
		debug="no"
		show-query-usage="no"/>
	
		<!--
	application:
		
		listener-type: none|classic|modern|mixed (default: mixed)
			none:		no application listener handling
			classic:	search only for Application.cfm
			modern:		search only for Application.cfc
			mixed:		search for Application.cfc and Application.cfm
			
		listener-mode: root|curr|curr2root (default:curr2root)
			define where the Application.cfc/Application.cfm will be searched
			root:			search only in webroot
			current:		search only in current directory
			curr2root:	search the App... from current directory up to root. 
	-->
	<application
		listener-type="mixed"
		listener-mode="curr2root"
		cache-directory="{tachyon-config}/cache/"
		cache-directory-max-size="100mb"/>
	
	<update 
		location="https://update.tachyon.org"
		type="manual"/>
		
<!--
LOGGING
===========================

Possible Layouts:
- - - - - - - - - - - - - -

Classic: 
 Same layout as with Tachyon 1 - 4.1

HTML: 
a HTML table, possible arguments are 
- locationinfo (boolean): By default, it is set to false which means there will be no location information output by this layout. If the the option is set to true, then the file name and line number of the statement at the origin of the log statement will be output.
- title: The Title option takes a String value. This option sets the document title of the generated HTML document.

XML:
The output of the XMLLayout consists of a series of log4j:event elements as defined in the log4j.dtd. It does not output a complete well-formed XML file. The output is designed to be included as an external entity in a separate file to form a correct XML file.
- locationinfo (boolean): By default, it is set to false which means there will be no location information output by this layout. If the the option is set to true, then the file name and line number of the statement at the origin of the log statement will be output.
- properties: Sets whether MDC key-value pairs should be output, default false.

Pattern:
A flexible layout configurable with pattern string. 
- pattern: This is the string which controls formatting and consists of a mix of literal content and conversion specifiers. for more details see: http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html

<layout-class>:
A full class path to a Layout class available in the environment with an empty constructor.
for every argument defined tachyon tries to call a matching setter method


Possible Appenders:
- - - - - - - - - - - - - -

Console: 
logs events to to the error or output stream
- streamtype: "output" or "error" 

Resource:
Logs error to a resource (locale file, ftp, zip, ...)
- path: path to the locale file
-charset (default:resource charset): charset used to write the file
- maxfiles (default:10): maximal files created
- maxfilesize (default:1024*1024*10): the maxial size of a log file created

<appender-class>:
A full class path to an Appender class available in the environment with an empty constructor.
for every argument defined tachyon tries to call a matching setter method

 -->
	<logging>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/mapping.log" level="error" layout="classic" name="mapping"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/rest.log" level="error" layout="classic" name="rest"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/gateway.log" level="error" layout="classic" name="gateway"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/remoteclient.log" level="error" layout="classic" name="remoteclient"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/orm.log" level="error" layout="classic" name="orm"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/mail.log" level="error" layout="classic" name="mail"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/search.log" level="error" layout="classic" name="search"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/scheduler.log" level="error" layout="classic" name="scheduler"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/scope.log" level="error" layout="classic" name="scope"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/application.log" level="info" layout="classic" name="application"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/exception.log" level="error" layout="classic" name="exception"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/thread.log" level="error" layout="classic" name="thread"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/deploy.log" level="info" layout="classic" name="deploy"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/requesttimeout.log" level="error" layout="classic" name="requesttimeout"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/memory.log" level="error" layout="classic" name="memory"/>
		<logger appender="resource" appender-arguments="path:{tachyon-config}/logs/datasource.log" level="error" layout="classic" name="datasource"/>
	</logging>
	
</cfTachyonConfiguration>